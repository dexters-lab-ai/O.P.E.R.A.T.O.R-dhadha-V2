diff --git a/lib/esm/puppeteer/api/Realm.js b/lib/esm/puppeteer/api/Realm.js
index d49050da325abe26687b8671378463e6a2439857..63f407485341de23958004b31bd02bcc4c36a9aa 100644
--- a/lib/esm/puppeteer/api/Realm.js
+++ b/lib/esm/puppeteer/api/Realm.js
@@ -29,7 +29,7 @@ export class Realm {
         if (typeof polling === 'number' && polling < 0) {
             throw new Error('Cannot poll with non-positive interval');
         }
-        const waitTask = new WaitTask(this, {
+        const waitTask = await WaitTask.create(this, {
             polling,
             root,
             timeout,
diff --git a/lib/esm/puppeteer/cdp/Accessibility.js b/lib/esm/puppeteer/cdp/Accessibility.js
index 5db08a50eef6f72b47b701488486d4d79a32aa2b..53eb73a75b8dc109afaa492aaee7ae6601b18882 100644
--- a/lib/esm/puppeteer/cdp/Accessibility.js
+++ b/lib/esm/puppeteer/cdp/Accessibility.js
@@ -145,7 +145,10 @@ export class Accessibility {
         }
     }
 }
-class AXNode {
+/**
+ * @public
+ */
+export class AXNode {
     payload;
     children = [];
     #richlyEditable = false;
@@ -262,6 +265,7 @@ class AXNode {
             case 'ColorWell':
             case 'combobox':
             case 'DisclosureTriangle':
+            case 'link':
             case 'listbox':
             case 'menu':
             case 'menubar':
@@ -316,6 +320,8 @@ class AXNode {
             properties.set('description', this.payload.description.value);
         }
         const node = {
+            id: this.payload.nodeId,
+            backendNodeId: this.payload.backendDOMNodeId,
             role: this.#role,
         };
         const userStringProperties = [
diff --git a/lib/esm/puppeteer/cdp/CDPSession.js b/lib/esm/puppeteer/cdp/CDPSession.js
index f8c4fa519eb793d3e745a3c056778bb413fe3dd0..f7fd26d05086656ec1b0244769eb1414bcbfaf67 100644
--- a/lib/esm/puppeteer/cdp/CDPSession.js
+++ b/lib/esm/puppeteer/cdp/CDPSession.js
@@ -18,9 +18,7 @@ import { CallbackRegistry } from '../common/CallbackRegistry.js';
 import { TargetCloseError } from '../common/Errors.js';
 import { assert } from '../util/assert.js';
 import { createProtocolErrorMessage } from '../util/ErrorLike.js';
-/**
- * @internal
- */
+
 export class CdpCDPSession extends CDPSession {
     #sessionId;
     #targetType;
@@ -28,9 +26,7 @@ export class CdpCDPSession extends CDPSession {
     #connection;
     #parentSessionId;
     #target;
-    /**
-     * @internal
-     */
+
     constructor(connection, targetType, sessionId, parentSessionId) {
         super();
         this.#connection = connection;
diff --git a/lib/esm/puppeteer/cdp/ChromeTargetManager.js b/lib/esm/puppeteer/cdp/ChromeTargetManager.js
index 28c8a9cfa8588ab4416c374b6e3648e16a727034..eabcd36e33006051d7ddcd5f6aa7be8fc754517c 100644
--- a/lib/esm/puppeteer/cdp/ChromeTargetManager.js
+++ b/lib/esm/puppeteer/cdp/ChromeTargetManager.js
@@ -27,7 +27,6 @@ function isPageTargetBecomingPrimary(target, newTargetInfo) {
  * new targets and allow the rest of Puppeteer to configure listeners while
  * the target is paused.
  *
- * @internal
  */
 export class ChromeTargetManager extends EventEmitter {
     #connection;
diff --git a/lib/esm/puppeteer/cdp/Connection.js b/lib/esm/puppeteer/cdp/Connection.js
index ad2854df958221435897622a52641a6c148fae29..f58e8c8e2c440c27bc4c7607afe988a837b0ebbd 100644
--- a/lib/esm/puppeteer/cdp/Connection.js
+++ b/lib/esm/puppeteer/cdp/Connection.js
@@ -102,6 +102,11 @@ export class Connection extends EventEmitter {
     async closeBrowser() {
         await this.send('Browser.close');
     }
+    
+    async triggerOnMessage(message) {
+        await this.onMessage(message);
+    }
+
     /**
      * @internal
      */
diff --git a/lib/esm/puppeteer/cdp/ExecutionContext.js b/lib/esm/puppeteer/cdp/ExecutionContext.js
index 4b604620ee66294547b00fe728826ce18809429f..ad6d34ef6b866ddd478e907b37c1e1194e13e9f0 100644
--- a/lib/esm/puppeteer/cdp/ExecutionContext.js
+++ b/lib/esm/puppeteer/cdp/ExecutionContext.js
@@ -17,7 +17,7 @@ import { LazyArg } from '../common/LazyArg.js';
 import { scriptInjector } from '../common/ScriptInjector.js';
 import { PuppeteerURL, SOURCE_URL_REGEX, createEvaluationError, getSourcePuppeteerURLIfAvailable, getSourceUrlComment, isString, valueFromRemoteObject, } from '../common/util.js';
 import { AsyncIterableUtil } from '../util/AsyncIterableUtil.js';
-import { stringifyFunction } from '../util/Function.js';
+import { stringifyFunctionAsync } from '../util/Function.js';
 import { ARIAQueryHandler } from './AriaQueryHandler.js';
 import { Binding } from './Binding.js';
 import { CdpElementHandle } from './ElementHandle.js';
@@ -199,7 +199,7 @@ export class ExecutionContext {
                 ? valueFromRemoteObject(remoteObject)
                 : createCdpHandle(this._world, remoteObject);
         }
-        const functionDeclaration = stringifyFunction(pageFunction);
+        const functionDeclaration = await stringifyFunctionAsync(pageFunction);
         const functionDeclarationWithSourceUrl = SOURCE_URL_REGEX.test(functionDeclaration)
             ? functionDeclaration
             : `${functionDeclaration}\n${sourceUrlComment}\n`;
diff --git a/lib/esm/puppeteer/cdp/LifecycleWatcher.js b/lib/esm/puppeteer/cdp/LifecycleWatcher.js
index 69ffc349da09aeeef08294fcdd2c68449c4065b5..89a65ebadb6f4d53f8d226d3174db7d8596eeec6 100644
--- a/lib/esm/puppeteer/cdp/LifecycleWatcher.js
+++ b/lib/esm/puppeteer/cdp/LifecycleWatcher.js
@@ -157,16 +157,16 @@ export class LifecycleWatcher {
                     return false;
                 }
             }
-            // TODO(#1): Its possible we don't need this check
-            // CDP provided the correct order for Loading Events
-            // And NetworkIdle is a global state
-            // Consider removing
-            for (const child of frame.childFrames()) {
-                if (child._hasStartedLoading &&
-                    !checkLifecycle(child, expectedLifecycle)) {
-                    return false;
-                }
-            }
+            // // TODO(#1): Its possible we don't need this check
+            // // CDP provided the correct order for Loading Events
+            // // And NetworkIdle is a global state
+            // // Consider removing
+            // for (const child of frame.childFrames()) {
+            //     if (child._hasStartedLoading &&
+            //         !checkLifecycle(child, expectedLifecycle)) {
+            //         return false;
+            //     }
+            // }
             return true;
         }
     }
diff --git a/lib/esm/puppeteer/cdp/Page.js b/lib/esm/puppeteer/cdp/Page.js
index 329c2a866ffea036e6ea16a5e8a7fafe88a3e205..16c81e3940c1003ca461e4aca0182ecadf0a4c11 100644
--- a/lib/esm/puppeteer/cdp/Page.js
+++ b/lib/esm/puppeteer/cdp/Page.js
@@ -86,9 +86,7 @@ import { MAIN_WORLD } from './IsolatedWorlds.js';
 import { releaseObject } from './JSHandle.js';
 import { Tracing } from './Tracing.js';
 import { WebWorker } from './WebWorker.js';
-/**
- * @internal
- */
+
 export class CdpPage extends Page {
     static async _create(client, target, ignoreHTTPSErrors, defaultViewport) {
         const page = new CdpPage(client, target, ignoreHTTPSErrors);
diff --git a/lib/esm/puppeteer/cdp/Puppeteer.js b/lib/esm/puppeteer/cdp/Puppeteer.js
index c741042e2130eb00b0072b56bac4ec5bb29e8a1e..777e9b6e6e8e445344d38c96eb92f4b1e40d8ebe 100644
--- a/lib/esm/puppeteer/cdp/Puppeteer.js
+++ b/lib/esm/puppeteer/cdp/Puppeteer.js
@@ -55,8 +55,8 @@ export class Puppeteer {
      *
      * @public
      */
-    static registerCustomQueryHandler(name, queryHandler) {
-        return this.customQueryHandlers.register(name, queryHandler);
+    static async registerCustomQueryHandler(name, queryHandler) {
+        return await this.customQueryHandlers.register(name, queryHandler);
     }
     /**
      * Unregisters a custom query handler for a given name.
diff --git a/lib/esm/puppeteer/cdp/Target.js b/lib/esm/puppeteer/cdp/Target.js
index 5aed018ad7e86935152068b33f2d82c5be591bd4..316aaf738ed631059e93d9c656335480245b9992 100644
--- a/lib/esm/puppeteer/cdp/Target.js
+++ b/lib/esm/puppeteer/cdp/Target.js
@@ -27,9 +27,7 @@ export var InitializationStatus;
     InitializationStatus["SUCCESS"] = "success";
     InitializationStatus["ABORTED"] = "aborted";
 })(InitializationStatus || (InitializationStatus = {}));
-/**
- * @internal
- */
+
 export class CdpTarget extends Target {
     #browserContext;
     #session;
diff --git a/lib/esm/puppeteer/common/CustomQueryHandler.js b/lib/esm/puppeteer/common/CustomQueryHandler.js
index f2ffcb1969cb07c6b064abe8193f98acba927a0d..fda186cb538c74953c32cdbf0550ff5ae86986c6 100644
--- a/lib/esm/puppeteer/common/CustomQueryHandler.js
+++ b/lib/esm/puppeteer/common/CustomQueryHandler.js
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 import { assert } from '../util/assert.js';
-import { interpolateFunction, stringifyFunction } from '../util/Function.js';
+import { interpolateFunctionAsync, stringifyFunctionAsync } from '../util/Function.js';
 import { QueryHandler, } from './QueryHandler.js';
 import { scriptInjector } from './ScriptInjector.js';
 /**
@@ -54,23 +54,23 @@ export class CustomQueryHandlerRegistry {
      * @param queryHandler - {@link CustomQueryHandler | Custom query handler} to
      * register.
      */
-    register(name, handler) {
+    async register(name, handler) {
         assert(!this.#handlers.has(name), `Cannot register over existing handler: ${name}`);
         assert(/^[a-zA-Z]+$/.test(name), `Custom query handler names may only contain [a-zA-Z]`);
         assert(handler.queryAll || handler.queryOne, `At least one query method must be implemented.`);
         const Handler = class extends QueryHandler {
-            static querySelectorAll = interpolateFunction((node, selector, PuppeteerUtil) => {
+            static querySelectorAll = interpolateFunctionAsync((node, selector, PuppeteerUtil) => {
                 return PuppeteerUtil.customQuerySelectors
                     .get(PLACEHOLDER('name'))
                     .querySelectorAll(node, selector);
             }, { name: JSON.stringify(name) });
-            static querySelector = interpolateFunction((node, selector, PuppeteerUtil) => {
+            static querySelector = interpolateFunctionAsync((node, selector, PuppeteerUtil) => {
                 return PuppeteerUtil.customQuerySelectors
                     .get(PLACEHOLDER('name'))
                     .querySelector(node, selector);
             }, { name: JSON.stringify(name) });
         };
-        const registerScript = interpolateFunction((PuppeteerUtil) => {
+        const registerScript = await interpolateFunctionAsync((PuppeteerUtil) => {
             PuppeteerUtil.customQuerySelectors.register(PLACEHOLDER('name'), {
                 queryAll: PLACEHOLDER('queryAll'),
                 queryOne: PLACEHOLDER('queryOne'),
@@ -78,10 +78,10 @@ export class CustomQueryHandlerRegistry {
         }, {
             name: JSON.stringify(name),
             queryAll: handler.queryAll
-                ? stringifyFunction(handler.queryAll)
+                ? await stringifyFunctionAsync(handler.queryAll)
                 : String(undefined),
             queryOne: handler.queryOne
-                ? stringifyFunction(handler.queryOne)
+                ? await stringifyFunctionAsync(handler.queryOne)
                 : String(undefined),
         }).toString();
         this.#handlers.set(name, [registerScript, Handler]);
diff --git a/lib/esm/puppeteer/common/QueryHandler.js b/lib/esm/puppeteer/common/QueryHandler.js
index 4367aee10256eed8d5e5a6d35ae08c785110602b..e24336260fc61ac48eb1a43b8d487da71e6fe180 100644
--- a/lib/esm/puppeteer/common/QueryHandler.js
+++ b/lib/esm/puppeteer/common/QueryHandler.js
@@ -60,7 +60,7 @@ var __disposeResources = (this && this.__disposeResources) || (function (Suppres
 });
 import { _isElementHandle } from '../api/ElementHandleSymbol.js';
 import { isErrorLike } from '../util/ErrorLike.js';
-import { interpolateFunction, stringifyFunction } from '../util/Function.js';
+import { interpolateFunctionAsync, stringifyFunctionAsync } from '../util/Function.js';
 import { transposeIterableHandle } from './HandleIterator.js';
 import { LazyArg } from './LazyArg.js';
 /**
@@ -70,14 +70,14 @@ export class QueryHandler {
     // Either one of these may be implemented, but at least one must be.
     static querySelectorAll;
     static querySelector;
-    static get _querySelector() {
+    static async _querySelectorAsync() {
         if (this.querySelector) {
             return this.querySelector;
         }
         if (!this.querySelectorAll) {
             throw new Error('Cannot create default `querySelector`.');
         }
-        return (this.querySelector = interpolateFunction(async (node, selector, PuppeteerUtil) => {
+        return (this.querySelector = await interpolateFunctionAsync(async (node, selector, PuppeteerUtil) => {
             const querySelectorAll = PLACEHOLDER('querySelectorAll');
             const results = querySelectorAll(node, selector, PuppeteerUtil);
             for await (const result of results) {
@@ -85,24 +85,24 @@ export class QueryHandler {
             }
             return null;
         }, {
-            querySelectorAll: stringifyFunction(this.querySelectorAll),
+            querySelectorAll: stringifyFunctionAsync(this.querySelectorAll),
         }));
     }
-    static get _querySelectorAll() {
+    static async _querySelectorAllAsync() {
         if (this.querySelectorAll) {
             return this.querySelectorAll;
         }
         if (!this.querySelector) {
             throw new Error('Cannot create default `querySelectorAll`.');
         }
-        return (this.querySelectorAll = interpolateFunction(async function* (node, selector, PuppeteerUtil) {
+        return (this.querySelectorAll = await interpolateFunctionAsync(async function* (node, selector, PuppeteerUtil) {
             const querySelector = PLACEHOLDER('querySelector');
             const result = await querySelector(node, selector, PuppeteerUtil);
             if (result) {
                 yield result;
             }
         }, {
-            querySelector: stringifyFunction(this.querySelector),
+            querySelector: await stringifyFunctionAsync(this.querySelector),
         }));
     }
     /**
@@ -113,7 +113,8 @@ export class QueryHandler {
     static async *queryAll(element, selector) {
         const env_1 = { stack: [], error: void 0, hasError: false };
         try {
-            const handle = __addDisposableResource(env_1, await element.evaluateHandle(this._querySelectorAll, selector, LazyArg.create(context => {
+            const _querySelectorAll = await this._querySelectorAllAsync();
+            const handle = __addDisposableResource(env_1, await element.evaluateHandle(_querySelectorAll, selector, LazyArg.create(context => {
                 return context.puppeteerUtil;
             })), false);
             yield* transposeIterableHandle(handle);
@@ -134,7 +135,8 @@ export class QueryHandler {
     static async queryOne(element, selector) {
         const env_2 = { stack: [], error: void 0, hasError: false };
         try {
-            const result = __addDisposableResource(env_2, await element.evaluateHandle(this._querySelector, selector, LazyArg.create(context => {
+            const _querySelector = await this._querySelectorAsync();
+            const result = __addDisposableResource(env_2, await element.evaluateHandle(_querySelector, selector, LazyArg.create(context => {
                 return context.puppeteerUtil;
             })), false);
             if (!(_isElementHandle in result)) {
@@ -174,8 +176,10 @@ export class QueryHandler {
                 const env_4 = { stack: [], error: void 0, hasError: false };
                 try {
                     signal?.throwIfAborted();
+                    const _querySelector = await this._querySelectorAsync();
+                    const fnString = await stringifyFunctionAsync(_querySelector);
                     const handle = __addDisposableResource(env_4, await frame.isolatedRealm().waitForFunction(async (PuppeteerUtil, query, selector, root, visible) => {
-                        const querySelector = PuppeteerUtil.createFunction(query);
+                        const querySelector = await PuppeteerUtil.createFunctionAsync(query);
                         const node = await querySelector(root ?? document, selector, PuppeteerUtil);
                         return PuppeteerUtil.checkVisibility(node, visible);
                     }, {
@@ -185,7 +189,7 @@ export class QueryHandler {
                         signal,
                     }, LazyArg.create(context => {
                         return context.puppeteerUtil;
-                    }), stringifyFunction(this._querySelector), selector, element, visible ? true : hidden ? false : undefined), false);
+                    }), fnString, selector, element, visible ? true : hidden ? false : undefined), false);
                     if (signal?.aborted) {
                         throw signal.reason;
                     }
diff --git a/lib/esm/puppeteer/common/WaitTask.js b/lib/esm/puppeteer/common/WaitTask.js
index 2964206a7f3d4d2c4b269ba653f592e313106573..8d1e21ce4a533e7bd9ce9644eb6d47e4a7c0ed6e 100644
--- a/lib/esm/puppeteer/common/WaitTask.js
+++ b/lib/esm/puppeteer/common/WaitTask.js
@@ -15,13 +15,18 @@
  */
 import { Deferred } from '../util/Deferred.js';
 import { isErrorLike } from '../util/ErrorLike.js';
-import { stringifyFunction } from '../util/Function.js';
+import { stringifyFunctionAsync } from '../util/Function.js';
 import { TimeoutError } from './Errors.js';
 import { LazyArg } from './LazyArg.js';
 /**
  * @internal
  */
 export class WaitTask {
+    static async create(world, options, fn, ...args) {
+        const stringFn = typeof fn === 'string' ? fn : await stringifyFunctionAsync(fn);
+        return new WaitTask(world, options, stringFn, ...args);
+    }
+
     #world;
     #polling;
     #root;
@@ -46,7 +51,7 @@ export class WaitTask {
                 this.#fn = `() => {return (${fn});}`;
                 break;
             default:
-                this.#fn = stringifyFunction(fn);
+                throw new Error('Unexpected non-string function type');
                 break;
         }
         this.#args = args;
diff --git a/lib/esm/puppeteer/injected/injected.js b/lib/esm/puppeteer/injected/injected.js
index 4822c5ca12b5ec65d44b0fadd7235667bf83522d..ad6f05803cdee7e93c7676e7dd2410b6e5438017 100644
--- a/lib/esm/puppeteer/injected/injected.js
+++ b/lib/esm/puppeteer/injected/injected.js
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 import { Deferred } from '../util/Deferred.js';
-import { createFunction } from '../util/Function.js';
+import { createFunctionAsync } from '../util/Function.js';
 import * as ARIAQuerySelector from './ARIAQuerySelector.js';
 import * as CustomQuerySelectors from './CustomQuerySelector.js';
 import * as PierceQuerySelector from './PierceQuerySelector.js';
@@ -36,7 +36,7 @@ const PuppeteerUtil = Object.freeze({
     ...util,
     ...XPathQuerySelector,
     Deferred,
-    createFunction,
+    createFunctionAsync,
     createTextContent,
     IntervalPoller,
     isSuitableNodeForTextMatching,
diff --git a/lib/esm/puppeteer/util/Function.js b/lib/esm/puppeteer/util/Function.js
index 08c8312c9f19ead56675baae9824f99fc88a23b4..8d73a2f1cc5395f9310d796a6089aae7b1a8d0bf 100644
--- a/lib/esm/puppeteer/util/Function.js
+++ b/lib/esm/puppeteer/util/Function.js
@@ -31,7 +31,7 @@ export const createFunction = (functionValue) => {
 /**
  * @internal
  */
-export function stringifyFunction(fn) {
+export async function stringifyFunction(fn) {
     let value = fn.toString();
     try {
         new Function(`(${value})`);
diff --git a/lib/types.d.ts b/lib/types.d.ts
index 0da635573b631d8c590a38fe4ebdaa1e069fbf84..a0502a0957e4e22ce94bc88cff3824962ced4fb4 100644
--- a/lib/types.d.ts
+++ b/lib/types.d.ts
@@ -1007,6 +1007,7 @@ export declare class Connection extends EventEmitter<CDPSessionEvents> {
      * @returns The CDP session that is created
      */
     createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CDPSession>;
+    triggerOnMessage(message: string): Promise<void>;
 }
 
 /**
@@ -2370,7 +2371,9 @@ export declare abstract class Frame extends EventEmitter<FrameEvents> {
     abstract waitForNavigation(options?: WaitForOptions): Promise<HTTPResponse | null>;
     /* Excluded from this release type: client */
     /* Excluded from this release type: mainRealm */
+    mainRealm(): Promise<IsolatedWorld>;
     /* Excluded from this release type: isolatedRealm */
+    isolatedWorld(name?: string): Promise<IsolatedWorld>;
     /* Excluded from this release type: clearDocumentHandle */
     /* Excluded from this release type: frameElement */
     /**
@@ -3354,6 +3357,12 @@ export declare interface InternalNetworkConditions extends NetworkConditions {
 /* Excluded from this release type: isNumber */
 
 /* Excluded from this release type: IsolatedWorld */
+/**
+ * @public
+ */
+export declare class IsolatedWorld {
+  adoptBackendNode(backendNodeId: Protocol.DOM.BackendNodeId): Promise<JSHandle | ElementHandle<Node>>;
+}
 
 /* Excluded from this release type: IsolatedWorldChart */
 
@@ -6613,7 +6622,7 @@ export declare class Puppeteer {
      *
      * @public
      */
-    static registerCustomQueryHandler(name: string, queryHandler: CustomQueryHandler): void;
+    static registerCustomQueryHandler(name: string, queryHandler: CustomQueryHandler): Promise<void>;
     /**
      * Unregisters a custom query handler for a given name.
      */
@@ -7082,6 +7091,7 @@ export declare class SecurityDetails {
  * @public
  */
 export declare interface SerializedAXNode {
+    id: string;
     /**
      * The {@link https://www.w3.org/TR/wai-aria/#usage_intro | role} of the node.
      */
@@ -7613,3 +7623,62 @@ export declare class WebWorker extends EventEmitter<Record<EventType, unknown>>
 /* Excluded from this release type: XPathQueryHandler */
 
 export { }
+
+export declare class CdpPage extends Page {
+  static _create(
+    client: CDPSession,
+    target: CdpTarget,
+    ignoreHTTPSErrors: boolean,
+    defaultViewport: Viewport | null
+  ): Promise<CdpPage>;
+}
+
+export declare class CdpTarget extends Target {
+  constructor(
+    targetInfo: Protocol.Target.TargetInfo,
+    session: CDPSession | undefined,
+    browserContext: BrowserContext | undefined,
+    targetManager: TargetManager | undefined,
+    sessionFactory:
+      | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)
+      | undefined
+  );
+}
+
+export class CdpCDPSession extends CDPSession {
+  constructor(
+    connection: any,
+    targetType: string,
+    sessionId: string,
+    parentSessionId: string | undefined
+  );
+  _onClosed(): void;
+  _onMessage(object: {
+    id?: number;
+    method: keyof CDPEvents;
+    params: CDPEvents[keyof CDPEvents];
+    error: {message: string; data: any; code: number};
+    result?: any;
+  }): void;
+}
+
+export declare class ChromeTargetManager extends EventEmitter<TargetManagerEvents> {
+  constructor(
+    connection: Connection,
+    targetFactory: TargetFactory,
+    targetFilterCallback?: TargetFilterCallback,
+    waitForInitiallyDiscoveredTargets = true
+  );
+}
+
+/**
+ * @public
+ */
+export declare class AXNode {
+  constructor(payload: Protocol.Accessibility.AXNode);
+  find(predicate: (x: AXNode) => boolean): AXNode | null;
+  isLeafNode(): boolean;
+  isControl(): boolean;
+  isInteresting(insideControl: boolean): boolean;
+  serialize(): SerializedAXNode;
+}

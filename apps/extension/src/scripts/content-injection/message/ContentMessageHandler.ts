import { TabMessageType } from '~shared/chrome/messaging/sendTabMessage';
import { ContentWorkerMessage, ContentWorkerMessageAction } from '~shared/injection/ContentWorkerMessage';
import { ALogger } from '~shared/logging/ALogger';

export class ContentMessageHandler {
  public static init() {
    const contentMessageHandler = new ContentMessageHandler();
    contentMessageHandler.start();
  }

  public start() {
    chrome.runtime?.onMessage?.addListener(this._handleContentMessages);
    chrome.runtime?.onMessageExternal?.addListener(this._handleContentMessages);
  }

  private async _handleContentMessages(
    message: ContentWorkerMessage,
    sender: chrome.runtime.MessageSender,
    sendResponse: (response?: unknown) => void,
  ) {
    if (message.type !== TabMessageType.CONTENT) return;
    try {
      switch (message.action as ContentWorkerMessageAction) {
        // TODO: remove this
        case ContentWorkerMessageAction.SEND_CHAT_GPT_MESSAGE: {
          // TODO: make this generated by LLM
          const textarea = document.querySelector('textarea');
          if (!textarea) throw new Error('No textarea found');
          textarea.value = message.payload;
          const inputEvent = new Event('input', { bubbles: true });
          textarea.dispatchEvent(inputEvent);

          const sendButton = document.querySelector('button[data-testid="send-button"]');
          if (!sendButton) throw new Error('No send button found');
          (sendButton as HTMLButtonElement).click();
          sendResponse({ ack: true }); // TODO: share the message response schema across repos
          return;
        }

        default:
          throw new Error('Unknown content message action');
      }
    } catch (error) {
      ALogger.error(error);
      sendResponse({ ack: false, error });
    }
  }
}

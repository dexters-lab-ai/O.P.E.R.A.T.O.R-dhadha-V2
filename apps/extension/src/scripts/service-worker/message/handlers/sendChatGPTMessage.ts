import z from 'zod';
import { TabMessageType, sendTabMessage } from '~shared/chrome/messaging/sendTabMessage';
import { ContentWorkerMessageAction } from '~shared/injection/ContentWorkerMessage';
import { ServiceWorkerMessageAction } from '~shared/messaging/service-worker/ServiceWorkerMessageAction';
import { ChatgptTabService } from '~src/common/services/tab/ChatgptTabService';

export const SendChatGPTMessageSchema = z.object({
  action: z.literal(ServiceWorkerMessageAction.SEND_CHATGPT_MESSAGE),
  payload: z.string(),
});
export type SendChatGPTMessage = z.infer<typeof SendChatGPTMessageSchema>;

// TODO: this action should be generated by LLM, persisted in the cloud and executed in a sandbox
export const sendChatGPTMessage = async (actionMessage: SendChatGPTMessage): Promise<void> => {
  const { payload } = SendChatGPTMessageSchema.parse(actionMessage);
  const chatGPTTab = ChatgptTabService.getInServiceWorker();
  if (!chatGPTTab || !chatGPTTab.id) throw new Error('Failed to get ChatGPT tab ID');
  await sendTabMessage(chatGPTTab.id, {
    type: TabMessageType.CONTENT,
    action: ContentWorkerMessageAction.SEND_CHAT_GPT_MESSAGE,
    payload,
  });
};
